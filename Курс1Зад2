{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMyTFWP8x2VHafjDMV/typV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlexShcherb1173/helloworld/blob/master/%D0%9A%D1%83%D1%80%D1%811%D0%97%D0%B0%D0%B42\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OY4XGzYJsdnT",
        "outputId": "a9821238-44e3-402e-ddbf-1992952e03a1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ".--- .- ...- .-\n",
            ".--. -.-- - .... --- -.\n",
            ".-. ..- -... -.--\n",
            ".--. .... .--.\n",
            "..-. --- .-. - .-. .- -.\n",
            ".--- .- ...- .- ... -.-. .-. .. .--. -\n",
            "-.- --- - .-.. .. -.\n",
            "... .-- .. ..-. -\n",
            "-... .- ... .. -.-.\n",
            ".--. .- ... -.-. .- .-..\n"
          ]
        }
      ],
      "source": [
        "morse = {\"0\": \"-----\", \"1\": \".----\", \"2\": \"..---\", \"3\": \"...--\", \"4\": \"....-\", \"5\": \".....\", \"6\": \"-....\",\n",
        "             \"7\": \"--...\", \"8\": \"---..\", \"9\": \"----.\", \"a\": \".-\", \"b\": \"-...\", \"c\": \"-.-.\", \"d\": \"-..\", \"e\": \".\",\n",
        "             \"f\": \"..-.\", \"g\": \"--.\", \"h\": \"....\", \"i\": \"..\", \"j\": \".---\", \"k\": \"-.-\", \"l\": \".-..\", \"m\": \"--\",\n",
        "             \"n\": \"-.\", \"o\": \"---\", \"p\": \".--.\", \"q\": \"--.-\", \"r\": \".-.\", \"s\": \"...\", \"t\": \"-\", \"u\": \"..-\",\n",
        "             \"v\": \"...-\", \"w\": \".--\", \"x\": \"-..-\", \"y\": \"-.--\", \"z\": \"--..\", \".\": \".-.-.-\", \",\": \"--..--\",\n",
        "             \"?\": \"..--..\", \"!\": \"-.-.--\", \"-\": \"-....-\", \"/\": \"-..-.\", \"@\": \".--.-.\", \"(\": \"-.--.\", \")\": \"-.--.-\"}\n",
        "\n",
        "words_to_decode = ['java', 'python', 'ruby', 'php', 'fortran', 'javascript', 'kotlin', 'swift', 'basic', 'pascal']\n",
        "def morse_encode(morse, word):\n",
        "  encoded_word = []\n",
        "  for char in word:\n",
        "    if char in morse:\n",
        "      encoded_word.append(morse[char])\n",
        "    else:\n",
        "      encoded_word.append('!')\n",
        "  return ' '.join(encoded_word)\n",
        "for word in words_to_decode:\n",
        "    print(morse_encode(morse, word))"
      ]
    }
  ]
}